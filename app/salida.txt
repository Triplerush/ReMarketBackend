# app/routes/report_routes.py
from flask import Blueprint, request, jsonify, g
from app.services import report_service
from app.auth.decorators import login_required, admin_required

bp = Blueprint('reports', __name__, url_prefix='/reports')

@bp.route('', methods=['POST'])
@login_required
def create():
    data = request.get_json()
    if not data or not all(k in data for k in ['pubId', 'reason']):
        return jsonify({"error": "Faltan campos: 'pubId' y 'reason'"}), 400
    try:
        new_report = report_service.create_report(data, g.user['id'])
        return jsonify(new_report), 201
    except ValueError as e:
        return jsonify({"error": str(e)}), 404

@bp.route('', methods=['GET'])
@admin_required
def get_all():
    status = request.args.get('status')
    reports = report_service.list_reports(status=status)
    return jsonify(reports), 200

@bp.route('/<report_id>', methods=['GET'])
@admin_required
def get_one(report_id):
    report = report_service.get_report_by_id(report_id)
    if not report: return jsonify({"error": "Reporte no encontrado"}), 404
    return jsonify(report), 200

@bp.route('/<report_id>', methods=['PUT'])
@admin_required
def update(report_id):
    data = request.get_json()
    if not data or 'status' not in data:
        return jsonify({"error": "Falta el campo 'status'"}), 400
    try:
        updated_report = report_service.update_report_status(report_id, data['status'])
        return jsonify(updated_report), 200
    except ValueError as e:
        return jsonify({"error": str(e)}), 400

@bp.route('/<report_id>', methods=['DELETE'])
@admin_required
def delete(report_id):
    try:
        result = report_service.soft_delete_report(report_id)
        return jsonify(result), 200
    except ValueError as e:
        return jsonify({"error": str(e)}), 404# app/routes/rating_routes.py
from flask import Blueprint, request, jsonify, g
from app.services import rating_service
from app.auth.decorators import login_required

bp = Blueprint('ratings', __name__, url_prefix='/ratings')

@bp.route('', methods=['POST'])
@login_required
def create():
    data = request.get_json()
    required = ['orderId', 'score', 'comment']
    if not data or not all(k in data for k in required):
        return jsonify({"error": "Faltan campos: 'orderId', 'score', 'comment'"}), 400
    if not 1 <= int(data['score']) <= 5:
        return jsonify({"error": "El 'score' debe ser un número entre 1 y 5."}), 400
    try:
        new_rating = rating_service.create_rating(data, g.user['id'])
        return jsonify(new_rating), 201
    except (ValueError, PermissionError) as e:
        return jsonify({"error": str(e)}), 400

@bp.route('', methods=['GET'])
def get_all():
    user_id = request.args.get('userId')
    ratings = rating_service.list_ratings(user_id=user_id)
    return jsonify(ratings), 200

@bp.route('/<rating_id>', methods=['GET'])
def get_one(rating_id):
    rating = rating_service.get_rating_by_id(rating_id)
    if not rating: return jsonify({"error": "Calificación no encontrada"}), 404
    return jsonify(rating), 200

@bp.route('/<rating_id>', methods=['PUT'])
@login_required
def update(rating_id):
    data = request.get_json()
    try:
        updated_rating = rating_service.update_rating(rating_id, data, g.user['id'])
        return jsonify(updated_rating), 200
    except (ValueError, PermissionError) as e:
        return jsonify({"error": str(e)}), 403

@bp.route('/<rating_id>', methods=['DELETE'])
@login_required
def delete(rating_id):
    try:
        result = rating_service.soft_delete_rating(rating_id, g.user['id'], g.user['role'])
        return jsonify(result), 200
    except (ValueError, PermissionError) as e:
        return jsonify({"error": str(e)}), 403# app/routes/order_routes.py
from flask import Blueprint, request, jsonify, g
from app.services import order_service
from app.auth.decorators import login_required

bp = Blueprint('orders', __name__, url_prefix='/orders')

@bp.route('', methods=['POST'])
@login_required
def create():
    """Crea una nueva orden de compra."""
    data = request.get_json()
    required = ['pubId', 'paymentMethod']
    if not data or not all(k in data for k in required):
        return jsonify({"error": "Faltan campos: 'pubId' y 'paymentMethod'"}), 400
    try:
        new_order = order_service.create_order(data, g.user['id'])
        return jsonify(new_order), 201
    except (ValueError, PermissionError) as e:
        return jsonify({"error": str(e)}), 400

@bp.route('', methods=['GET'])
@login_required
def get_all():
    """Lista todas las órdenes en las que el usuario es comprador o vendedor."""
    orders = order_service.list_user_orders(g.user['id'])
    return jsonify(orders), 200

@bp.route('/<order_id>', methods=['GET'])
@login_required
def get_one(order_id):
    """Obtiene una orden específica si el usuario es parte de ella."""
    try:
        order = order_service.get_order_by_id(order_id, g.user['id'])
        if not order: return jsonify({"error": "Orden no encontrada"}), 404
        return jsonify(order), 200
    except PermissionError as e:
        return jsonify({"error": str(e)}), 403

@bp.route('/<order_id>', methods=['PUT'])
@login_required
def update(order_id):
    """Actualiza el estado de una orden (ej. a 'completada'). Solo el vendedor."""
    data = request.get_json()
    if not data or 'status' not in data:
        return jsonify({"error": "Falta el campo 'status'"}), 400
    try:
        updated_order = order_service.update_order_status(order_id, data['status'], g.user['id'])
        return jsonify(updated_order), 200
    except (ValueError, PermissionError) as e:
        return jsonify({"error": str(e)}), 403

@bp.route('/<order_id>', methods=['DELETE'])
@login_required
def delete(order_id):
    """Elimina (desactiva) una orden. El comprador o vendedor pueden hacerlo."""
    try:
        result = order_service.soft_delete_order(order_id, g.user['id'])
        return jsonify(result), 200
    except (ValueError, PermissionError) as e:
        return jsonify({"error": str(e)}), 403# app/routes/publication_routes.py
from flask import Blueprint, request, jsonify, g
from app.services import publication_service
from app.auth.decorators import login_required, seller_required

bp = Blueprint('publications', __name__, url_prefix='/publications')

@bp.route('', methods=['POST'])
@seller_required
def create():
    """Crea una nueva publicación. Solo para vendedores."""
    data = request.get_json()
    required = ['brand', 'model', 'capacity', 'price', 'imei', 'description']
    if not data or not all(k in data for k in required):
        return jsonify({"error": "Faltan campos requeridos"}), 400
    try:
        new_pub = publication_service.create_publication(data, g.user['id'])
        return jsonify(new_pub), 201
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@bp.route('', methods=['GET'])
def get_all():
    """Obtiene una lista de todas las publicaciones activas y disponibles."""
    pubs = publication_service.get_all_active_publications()
    return jsonify(pubs), 200

@bp.route('/<pub_id>', methods=['GET'])
def get_one(pub_id):
    """Obtiene una publicación específica por su ID."""
    pub = publication_service.get_publication_by_id(pub_id)
    if not pub:
        return jsonify({"error": "Publicación no encontrada"}), 404
    return jsonify(pub), 200

@bp.route('/<pub_id>', methods=['PUT'])
@login_required
def update(pub_id):
    """Actualiza una publicación. Solo para el vendedor dueño."""
    data = request.get_json()
    if not data:
        return jsonify({"error": "Cuerpo de la petición vacío"}), 400
    try:
        updated_pub = publication_service.update_publication(pub_id, data, g.user['id'])
        return jsonify(updated_pub), 200
    except (ValueError, PermissionError) as e:
        return jsonify({"error": str(e)}), 403
    except Exception as e:
        return jsonify({"error": f"Error interno: {e}"}), 500

@bp.route('/<pub_id>', methods=['DELETE'])
@login_required
def delete(pub_id):
    """Elimina (desactiva) una publicación. Solo para el vendedor dueño o un admin."""
    try:
        result = publication_service.soft_delete_publication(pub_id, g.user['id'], g.user['role'])
        return jsonify(result), 200
    except (ValueError, PermissionError) as e:
        return jsonify({"error": str(e)}), 403
    except Exception as e:
        return jsonify({"error": f"Error interno: {e}"}), 500# app/routes/user_routes.py
from flask import Blueprint, request, jsonify, g
from app.services import user_service
from app.auth.decorators import login_required, admin_required

bp = Blueprint('users', __name__, url_prefix='/users')

@bp.route('/register', methods=['POST'])
def register():
    data = request.get_json()
    required = ['firstName', 'lastName', 'dni', 'tel/movil', 'dir/domicilio', 'email']
    if not data or not all(k in data for k in required):
        return jsonify({"error": "Faltan campos requeridos"}), 400
    try:
        new_user = user_service.create_user(data)
        return jsonify({"message": "Usuario creado", "user": new_user}), 201
    except ValueError as e: return jsonify({"error": str(e)}), 409

@bp.route('', methods=['GET'])
@admin_required
def list_users():
    users = user_service.get_all_users()
    return jsonify(users), 200

@bp.route('/<user_id>', methods=['GET'])
@login_required
def get_user(user_id):
    user = user_service.get_user_by_id(user_id)
    if not user: return jsonify({"error": "Usuario no encontrado"}), 404
    return jsonify(user), 200

@bp.route('/<user_id>', methods=['PUT'])
@login_required
def update_user(user_id):
    data = request.get_json()
    try:
        updated_user = user_service.update_user(user_id, data, g.user['id'], g.user['role'])
        return jsonify(updated_user), 200
    except (ValueError, PermissionError) as e:
        return jsonify({"error": str(e)}), 403

@bp.route('/<user_id>', methods=['DELETE'])
@login_required
def delete_user(user_id):
    try:
        result = user_service.soft_delete_user(user_id, g.user['id'], g.user['role'])
        return jsonify(result), 200
    except (ValueError, PermissionError) as e:
        return jsonify({"error": str(e)}), 403# app/utils.py
from datetime import datetime
# --- LÍNEA CORREGIDA ---
from google.cloud.firestore_v1 import GeoPoint 

def clean_firestore_doc(doc_data):
    """
    Limpia un diccionario de datos de Firestore, convirtiendo tipos especiales
    (datetime, GeoPoint) a formatos serializables en JSON.
    """
    if not doc_data:
        return doc_data

    for key, value in doc_data.items():
        if isinstance(value, datetime):
            doc_data[key] = value.isoformat()
        elif isinstance(value, GeoPoint):
            doc_data[key] = { "latitude": value.latitude, "longitude": value.longitude }
    
    return doc_data# app/config.py
import os

class Config:
    FIREBASE_CREDENTIALS_PATH = os.getenv(
        'GOOGLE_APPLICATION_CREDENTIALS', 
        'firebase-adminsdk-credentials.json'
    )
    FIREBASE_STORAGE_BUCKET = os.getenv('FIREBASE_STORAGE_BUCKET')# app/auth/decorators.py
from functools import wraps
from flask import request, jsonify, g

def login_required(f):
    """Decorador que verifica una cabecera de autenticación simulada y adjunta el usuario a 'g'."""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        auth_header = request.headers.get('Authorization')
        if not auth_header or not auth_header.startswith('Bearer '):
            return jsonify({"error": "Cabecera 'Authorization: Bearer <token>' faltante o mal formada."}), 401
        
        token = auth_header.split('Bearer ')[1]
        
        try:
            # Simulación: El token es "user_id:role"
            user_id, role = token.split(':')
            if not user_id or not role:
                raise ValueError()
            # 'g' es un objeto global de Flask para el contexto de una petición.
            # Guardamos los datos del usuario aquí para usarlos en las rutas.
            g.user = {'id': user_id, 'role': role}
        except (ValueError, IndexError):
            return jsonify({"error": "Token simulado inválido. Use el formato 'user-id:role'."}), 401
            
        return f(*args, **kwargs)
    return decorated_function

def role_required(role_name):
    """Decorador genérico que verifica si el usuario tiene un rol específico."""
    def decorator(f):
        @wraps(f)
        @login_required # Primero nos aseguramos que el usuario está logueado
        def decorated_function(*args, **kwargs):
            if g.user.get('role') != role_name:
                return jsonify({"error": f"Acceso denegado. Se requiere el rol de '{role_name}'."}), 403
            return f(*args, **kwargs)
        return decorated_function
    return decorator

# Creamos decoradores específicos para facilitar su uso
seller_required = role_required('seller')
admin_required = role_required('admin')# app/__init__.py
import os
from flask import Flask
import firebase_admin
from firebase_admin import credentials, firestore
from .config import Config

db = None

def create_app():
    global db
    app = Flask(__name__)
    app.config.from_object(Config)

    # Evita reinicializar la app de Firebase si ya existe
    if not firebase_admin._apps:
        try:
            # Usamos la configuración de Config para mantenerlo centralizado
            cred = credentials.Certificate(Config.FIREBASE_CREDENTIALS_PATH)
            firebase_admin.initialize_app(cred)
            print("Firebase Admin SDK inicializado exitosamente.")
        except Exception as e:
            print(f"Error CRÍTICO inicializando Firebase Admin SDK: {e}")
    
    db = firestore.client()

    with app.app_context():
        # --- LÍNEA DE IMPORTACIÓN CORREGIDA ---
        from .routes import user_routes, publication_routes, order_routes, rating_routes, report_routes
        # NOTA: Había un 'transaction_routes' que no existía, lo he quitado por ahora.
        # Si lo creas, puedes añadirlo de nuevo.

        app.register_blueprint(user_routes.bp)
        # --- LÍNEA DE REGISTRO CORREGIDA ---
        app.register_blueprint(publication_routes.bp)
        app.register_blueprint(order_routes.bp)
        app.register_blueprint(rating_routes.bp)
        app.register_blueprint(report_routes.bp)
        
        print("Todos los Blueprints han sido registrados.")

    return app# app/services/report_service.py
from app import db
from app.utils import clean_firestore_doc
from firebase_admin import firestore

def create_report(data, reporter_id):
    """Crea un nuevo reporte para una publicación."""
    pub_doc = db.collection('publicaciones').document(data['pubId']).get()
    if not pub_doc.exists:
        raise ValueError("La publicación que intentas reportar no existe.")
    report_data = {
        'pubId': data['pubId'], 'reporterId': reporter_id,
        'reason': data['reason'], 'status': 'pendiente',
        'createdAt': firestore.SERVER_TIMESTAMP, 'active': True
    }
    update_time, report_ref = db.collection('reportes').add(report_data)
    created_doc = report_ref.get()
    new_report_data = created_doc.to_dict()
    new_report_data['id'] = created_doc.id
    return clean_firestore_doc(new_report_data)

def list_reports(status=None):
    """Lista todos los reportes, opcionalmente filtrados por status."""
    query = db.collection('reportes').where(filter=firestore.FieldFilter('active', '==', True))
    if status:
        query = query.where(filter=firestore.FieldFilter('status', '==', status))
    
    reports = []
    for doc in query.stream():
        report_data = doc.to_dict()
        report_data['id'] = doc.id
        reports.append(clean_firestore_doc(report_data))
    return reports

def get_report_by_id(report_id):
    """Obtiene un reporte por su ID."""
    doc = db.collection('reportes').document(report_id).get()
    if not doc.exists or doc.to_dict().get('active') is False:
        return None
    report_data = doc.to_dict()
    report_data['id'] = doc.id
    return clean_firestore_doc(report_data)

def update_report_status(report_id, new_status):
    """Actualiza el estado de un reporte (admin only)."""
    report_ref = db.collection('reportes').document(report_id)
    if not report_ref.get().exists:
        raise ValueError("Reporte no encontrado.")
    
    valid_statuses = ['en-revision', 'resuelto', 'desestimado']
    if new_status not in valid_statuses:
        raise ValueError("Estado no válido.")

    report_ref.update({'status': new_status})
    return get_report_by_id(report_id)

def soft_delete_report(report_id):
    """Desactiva un reporte (admin only)."""
    report_ref = db.collection('reportes').document(report_id)
    if not report_ref.get().exists:
        raise ValueError("Reporte no encontrado.")
    report_ref.update({'active': False})
    return {"id": report_id, "message": "Reporte eliminado."}# app/services/publication_service.py
from app import db
from app.utils import clean_firestore_doc
from firebase_admin import firestore

def create_publication(data, seller_id):
    publication_data = {
        'sellerId': seller_id, 'brand': data['brand'], 'model': data['model'],
        'capacity': data['capacity'], 'price': float(data['price']), 'imei': data['imei'],
        'description': data['description'], 'images(s)': data.get('images(s)', []),
        'category': data.get('category', 'smartphone'), 'urlVideo': data.get('urlVideo', ''),
        'box/cargador': data.get('box/cargador', 'No especificado'), 'invoice/uri': data.get('invoice/uri', ''),
        'status': 'disponible', 'createdAt': firestore.SERVER_TIMESTAMP,
        'updatedAt': firestore.SERVER_TIMESTAMP, 'active': True
    }
    update_time, pub_ref = db.collection('publicaciones').add(publication_data)
    created_doc = pub_ref.get()
    new_pub_data = created_doc.to_dict()
    new_pub_data['id'] = created_doc.id
    return clean_firestore_doc(new_pub_data)

def get_all_active_publications():
    query = db.collection('publicaciones')\
              .where(filter=firestore.FieldFilter('active', '==', True))\
              .where(filter=firestore.FieldFilter('status', '==', 'disponible'))
    publications = []
    for doc in query.stream():
        pub_data = doc.to_dict()
        pub_data['id'] = doc.id
        publications.append(clean_firestore_doc(pub_data))
    return publications

def get_publication_by_id(pub_id):
    doc = db.collection('publicaciones').document(pub_id).get()
    if not doc.exists or doc.to_dict().get('active') is False:
        return None
    pub_data = doc.to_dict()
    pub_data['id'] = doc.id
    return clean_firestore_doc(pub_data)

def update_publication(pub_id, data, user_id):
    pub_ref = db.collection('publicaciones').document(pub_id)
    doc = pub_ref.get()
    if not doc.exists: raise ValueError("Publicación no encontrada.")
    
    pub_data = doc.to_dict()
    if pub_data['sellerId'] != user_id:
        raise PermissionError("No tienes permiso para editar esta publicación.")
    
    allowed_fields = ['brand', 'model', 'capacity', 'price', 'description', 'images(s)', 'urlVideo', 'box/cargador']
    update_data = {k: v for k, v in data.items() if k in allowed_fields}
    if not update_data:
        raise ValueError("No se proporcionaron campos válidos para actualizar.")
    update_data['updatedAt'] = firestore.SERVER_TIMESTAMP
    pub_ref.update(update_data)
    return get_publication_by_id(pub_id)

def soft_delete_publication(pub_id, user_id, user_role):
    pub_ref = db.collection('publicaciones').document(pub_id)
    doc = pub_ref.get()
    if not doc.exists: raise ValueError("Publicación no encontrada.")
    pub_data = doc.to_dict()
    if pub_data['sellerId'] != user_id and user_role != 'admin':
        raise PermissionError("No tienes permiso para eliminar esta publicación.")
    pub_ref.update({'active': False, 'updatedAt': firestore.SERVER_TIMESTAMP})
    return {"id": pub_id, "message": "Publicación eliminada."}# app/services/rating_service.py
from app import db
from app.utils import clean_firestore_doc
from firebase_admin import firestore

def create_rating(data, rater_id):
    """Crea una nueva calificación para una orden."""
    order_doc = db.collection('orders').document(data['orderId']).get()
    if not order_doc.exists:
        raise ValueError("La orden no existe.")
    
    order_data = order_doc.to_dict()
    if order_data.get('status') != 'reservada':
        raise PermissionError("Solo se pueden calificar órdenes completadas.")

    if rater_id not in [order_data['buyerId'], order_data['sellerId']]:
        raise PermissionError("No participaste en esta transacción.")

    # Verificar que no se haya calificado ya
    ratings_ref = db.collection('ratings')
    query = ratings_ref.where(filter=firestore.FieldFilter('orderId', '==', data['orderId']))\
                       .where(filter=firestore.FieldFilter('raterId', '==', rater_id))\
                       .limit(1).stream()
    if len(list(query)) > 0:
        raise PermissionError("Ya has calificado esta transacción.")

    rating_data = {
        'orderId': data['orderId'], 'sellerId': order_data['sellerId'],
        'buyerId': order_data['buyerId'], 'raterId': rater_id,
        'score': int(data['score']), 'comment': data['comment'],
        'createdAt': firestore.SERVER_TIMESTAMP, 'active': True
    }
    update_time, rating_ref = ratings_ref.add(rating_data)
    created_doc = rating_ref.get()
    new_rating_data = created_doc.to_dict()
    new_rating_data['id'] = created_doc.id
    return clean_firestore_doc(new_rating_data)

def list_ratings(user_id=None):
    """Lista calificaciones. Si se provee user_id, filtra por el usuario calificado."""
    query = db.collection('ratings').where(filter=firestore.FieldFilter('active', '==', True))
    if user_id:
        # rateeId es el usuario que recibe la calificación
        query = query.where(filter=firestore.FieldFilter('rateeId', '==', user_id))
    
    ratings = []
    for doc in query.stream():
        rating_data = doc.to_dict()
        rating_data['id'] = doc.id
        ratings.append(clean_firestore_doc(rating_data))
    return ratings

def get_rating_by_id(rating_id):
    """Obtiene una calificación por su ID."""
    doc = db.collection('ratings').document(rating_id).get()
    if not doc.exists or doc.to_dict().get('active') is False:
        return None
    rating_data = doc.to_dict()
    rating_data['id'] = doc.id
    return clean_firestore_doc(rating_data)

def update_rating(rating_id, data, user_id):
    """Actualiza el score o comentario de una calificación."""
    rating_ref = db.collection('ratings').document(rating_id)
    doc = rating_ref.get()
    if not doc.exists: raise ValueError("Calificación no encontrada.")
    
    rating_data = doc.to_dict()
    if rating_data['raterId'] != user_id:
        raise PermissionError("Solo puedes editar tus propias calificaciones.")

    update_data = {}
    if 'score' in data: update_data['score'] = int(data['score'])
    if 'comment' in data: update_data['comment'] = data['comment']
    if not update_data: raise ValueError("No se proporcionaron campos para actualizar.")

    rating_ref.update(update_data)
    return get_rating_by_id(rating_id)

def soft_delete_rating(rating_id, user_id, user_role):
    """Desactiva una calificación (soft delete)."""
    rating_ref = db.collection('ratings').document(rating_id)
    doc = rating_ref.get()
    if not doc.exists: raise ValueError("Calificación no encontrada.")

    rating_data = doc.to_dict()
    if rating_data['raterId'] != user_id and user_role != 'admin':
        raise PermissionError("No tienes permiso para eliminar esta calificación.")
    
    rating_ref.update({'active': False})
    return {"id": rating_id, "message": "Calificación eliminada."}# app/services/order_service.py
from app import db
from app.utils import clean_firestore_doc
from firebase_admin import firestore

def create_order(data, buyer_id):
    pub_ref = db.collection('publicaciones').document(data['pubId'])
    pub_doc = pub_ref.get()
    if not pub_doc.exists or pub_doc.to_dict().get('active') is False:
        raise ValueError("La publicación no existe o no está activa.")
    pub_data = pub_doc.to_dict()
    if pub_data['status'] != 'disponible':
        raise PermissionError("Esta publicación no está disponible para la venta.")
    order_data = {
        'pubId': data['pubId'], 'buyerId': buyer_id, 'sellerId': pub_data['sellerId'],
        'price': pub_data['price'], 'status': 'reservada', 'paymentMethod': data['paymentMethod'],
        'createdAt': firestore.SERVER_TIMESTAMP, 'updatedAt': firestore.SERVER_TIMESTAMP, 'active': True
    }
    transaction = db.transaction()
    @firestore.transactional
    def update_in_transaction(trans, pub_ref, order_data):
        trans.update(pub_ref, {'status': 'vendida', 'updatedAt': firestore.SERVER_TIMESTAMP})
        order_ref = db.collection('orders').document()
        trans.set(order_ref, order_data)
        return order_ref
    order_ref = update_in_transaction(transaction, pub_ref, order_data)
    return get_order_by_id(order_ref.id, buyer_id)

def get_order_by_id(order_id, user_id):
    doc = db.collection('orders').document(order_id).get()
    if not doc.exists: return None
    order_data = doc.to_dict()
    if user_id not in [order_data['buyerId'], order_data['sellerId']]:
        raise PermissionError("No tienes permiso para ver esta orden.")
    order_data['id'] = doc.id
    return clean_firestore_doc(order_data)

def list_user_orders(user_id):
    buyer_orders_query = db.collection('orders').where(filter=firestore.FieldFilter('buyerId', '==', user_id)).stream()
    seller_orders_query = db.collection('orders').where(filter=firestore.FieldFilter('sellerId', '==', user_id)).stream()
    orders = []
    for doc in buyer_orders_query:
        order_data = doc.to_dict()
        order_data['id'] = doc.id
        orders.append(clean_firestore_doc(order_data))
    for doc in seller_orders_query:
        order_data = doc.to_dict()
        order_data['id'] = doc.id
        if not any(o['id'] == doc.id for o in orders):
            orders.append(clean_firestore_doc(order_data))
    return orders

def update_order_status(order_id, new_status, user_id):
    order_ref = db.collection('orders').document(order_id)
    doc = order_ref.get()
    if not doc.exists: raise ValueError("Orden no encontrada.")
    order_data = doc.to_dict()
    if user_id != order_data['sellerId']:
        raise PermissionError("Solo el vendedor puede actualizar el estado de la orden.")
    valid_statuses = ['completada', 'cancelada']
    if new_status not in valid_statuses:
        raise ValueError("Estado no válido.")
    
    update_data = {'status': new_status, 'updatedAt': firestore.SERVER_TIMESTAMP}
    order_ref.update(update_data)

    if new_status == 'cancelada':
        pub_ref = db.collection('publicaciones').document(order_data['pubId'])
        pub_ref.update({'status': 'disponible', 'updatedAt': firestore.SERVER_TIMESTAMP})

    return get_order_by_id(order_id, user_id)

# Añade esta función al final de app/services/order_service.py

def soft_delete_order(order_id, user_id):
    """Desactiva una orden (soft delete), solo por el comprador o vendedor."""
    order_ref = db.collection('orders').document(order_id)
    doc = order_ref.get()
    if not doc.exists: raise ValueError("Orden no encontrada.")
    
    order_data = doc.to_dict()
    if user_id not in [order_data['buyerId'], order_data['sellerId']]:
        raise PermissionError("No tienes permiso para eliminar esta orden.")
    
    # Se podría añadir lógica para revertir el estado de la publicación si se cancela
    # if order_data['status'] == 'reservada':
    #     pub_ref = db.collection('publicaciones').document(order_data['pubId'])
    #     pub_ref.update({'status': 'disponible'})

    order_ref.update({'active': False, 'updatedAt': firestore.SERVER_TIMESTAMP})
    return {"id": order_id, "message": "Orden eliminada."}# app/services/user_service.py
from app import db
from app.utils import clean_firestore_doc
from firebase_admin import firestore

def create_user(data):
    """(CREATE) Crea un nuevo usuario en la colección 'users'."""
    users_ref = db.collection('users')
    query = users_ref.where(filter=firestore.FieldFilter('email', '==', data['email'])).limit(1).stream()
    if len(list(query)) > 0:
        raise ValueError("El correo electrónico ya está en uso.")

    user_data = {
        'firstName': data['firstName'],
        'lastName': data['lastName'],
        'dni': data['dni'],
        'tel/movil': data['tel/movil'],
        'dir/domicilio': data['dir/domicilio'],
        'selfie/uri': data.get('selfie/uri', ''),
        'email': data['email'],
        'approved': False,
        'role': data.get('role', 'buyer'),
        'createdAt': firestore.SERVER_TIMESTAMP,
        'active': True
    }
    
    update_time, user_ref = users_ref.add(user_data)
    created_doc = user_ref.get()
    
    new_user_data = created_doc.to_dict()
    new_user_data['id'] = created_doc.id
    
    return clean_firestore_doc(new_user_data)

def get_all_users():
    """(READ-LIST) Obtiene una lista de todos los usuarios activos."""
    users_ref = db.collection('users').where(filter=firestore.FieldFilter('active', '==', True))
    users = []
    for doc in users_ref.stream():
        user_data = doc.to_dict()
        user_data['id'] = doc.id
        users.append(clean_firestore_doc(user_data))
    return users

def get_user_by_id(user_id):
    """(READ-ID) Obtiene un usuario activo por su ID."""
    doc = db.collection('users').document(user_id).get()
    if not doc.exists or doc.to_dict().get('active') is False:
        return None
    
    user_data = doc.to_dict()
    user_data['id'] = doc.id
    return clean_firestore_doc(user_data)

def update_user(user_id, data, current_user_id, current_user_role):
    """(UPDATE) Actualiza los datos de un usuario."""
    user_ref = db.collection('users').document(user_id)
    if not user_ref.get().exists:
        raise ValueError("Usuario no encontrado.")

    # Lógica de Permisos: Un usuario solo puede actualizarse a sí mismo, a menos que sea admin.
    if user_id != current_user_id and current_user_role != 'admin':
        raise PermissionError("No tienes permiso para actualizar este usuario.")
    
    # Campos que un usuario normal puede actualizar de su propio perfil
    allowed_fields = ['firstName', 'lastName', 'tel/movil', 'dir/domicilio', 'selfie/uri']
    update_data = {k: v for k, v in data.items() if k in allowed_fields}

    # Campos que solo un administrador puede modificar
    if current_user_role == 'admin':
        admin_fields = ['approved', 'role', 'active']
        admin_update_data = {k: v for k, v in data.items() if k in admin_fields}
        update_data.update(admin_update_data)

    if not update_data:
        raise ValueError("No se proporcionaron campos válidos para actualizar.")

    user_ref.update(update_data)
    # Devuelve el documento actualizado y limpio
    return get_user_by_id(user_id)

def soft_delete_user(user_id, current_user_id, current_user_role):
    """(DELETE) Desactiva un usuario (soft delete)."""
    # Lógica de Permisos: Un usuario solo puede eliminarse a sí mismo, a menos que sea admin.
    if user_id != current_user_id and current_user_role != 'admin':
        raise PermissionError("No tienes permiso para eliminar este usuario.")
        
    user_ref = db.collection('users').document(user_id)
    if not user_ref.get().exists:
        raise ValueError("Usuario no encontrado.")

    # Se marca el usuario como inactivo en lugar de borrarlo de la base de datos
    user_ref.update({'active': False})
    return {"id": user_id, "message": "Usuario desactivado exitosamente."}